{"version":3,"sources":["api/v1.js","entries/actions/fetchJobProfiles.js","entries/constants.js","entries/entries.jsx","entries/reducers/collection.js","entries/reducers/newPage.js","globalReducer.js","entries/index.js","entries/reducers/index.js","store.js","App.jsx","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","timeout","on200","status","code","data","onOther","err","response","d","error","message","v1","get","path","config","then","catch","post","put","del","delete","fetchJobProfiles","dispatch","type","payload","console","log","Column","ColumnGroup","key","firstName","lastName","age","address","tags","Entries","state","fetch","this","props","collection","newPage","size","dataSource","title","dataIndex","render","map","tag","color","text","record","React","PureComponent","actions","connect","entries","initialState","profileList","reducers","combineReducers","action","store","createStore","globalReducer","composeWithDevTools","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","Header","Footer","Content","Sider","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c088bccc.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create ({\n  baseURL: `https://nut-case.s3.amazonaws.com/jobs.json`,\n  timeout: 40000,\n});\n\nconst on200 = ({status, data}) => ({status, code: 'OK', data});\n\nconst onOther = err => {\n  const {status, data} = err.response || {status: 0, data: null};\n  const d = data || {};\n  if (status < 100) {\n    const code = err.code || 'E_DISCONNECTED';\n    const error = err.message || 'Failed to connect, check your connection';\n    return {status, code, data: {error, code}};\n  }\n  const code = d.code || `E_${status}`;\n  const error = d.error || `Something went wrong (${status})`;\n  return {status, code, data: {error, code}};\n};\n\nconst get = (path, config) => {\n  return api.get(path, config).then(on200).catch(onOther);\n};\nconst del = (path, config) => {\n  return api.delete(path, config).then(on200).catch(onOther);\n};\nconst post = (path, data, config) => {\n  return api.post(path, data, config).then(on200).catch(onOther);\n};\nconst put = (path, data, config) => {\n  return api.put(path, data, config).then(on200).catch(onOther);\n};\n\nconst v1 = {\n  get,\n  post,\n  put,\n  del\n};\n\nexport default v1;\n","import v1 from '../../api/v1';\n\nimport { FETCH_JOB_PROFILE_FAIL, FETCH_JOB_PROFILE_REQUEST, FETCH_JOB_PROFILE_SUCCESS, UNAUTH } from '../constants';\n\nconst fetchJobProfiles = () => (dispatch) => {\n  dispatch({ type: FETCH_JOB_PROFILE_REQUEST, payload: {} });\n  console.log(\"inasdd\")\n  v1.get(null, null).then(({ code, data }) => {\n    console.log(code, data)\n    switch (code) {\n      case 'OK':\n        return dispatch({ type: FETCH_JOB_PROFILE_SUCCESS, payload: data });\n      case 'E_UNAUTH':\n        return dispatch({ type: UNAUTH, payload: data });\n      default:\n        return dispatch({ type: FETCH_JOB_PROFILE_FAIL, payload: data });\n    }\n  });\n};\n\nexport default fetchJobProfiles;","export const NEW_PAGE_INIT = 'NEW_PAGE_INIT';\nexport const FETCH_JOB_PROFILE_REQUEST = 'FETCH_JOB_PROFILE_REQUEST';\nexport const FETCH_JOB_PROFILE_SUCCESS = 'FETCH_JOB_PROFILE_SUCCESS';\nexport const FETCH_JOB_PROFILE_FAIL = 'FETCH_JOB_PROFILE_FAIL';\nexport const UNAUTH = 'UNAUTH'","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Spin, Col, Row } from 'antd';\n// import 'antd/dist/antd.css';\n// import { Link } from 'react-router-dom';\n// import initNewPage from './actions/initNewPage';\nimport fetchJobProfiles from './actions/fetchJobProfiles';\n\nimport { Table, Divider, Tag } from 'antd';\n\nconst { Column, ColumnGroup } = Table;\n\nconst data = [\n  {\n    key: '1',\n    firstName: 'John',\n    lastName: 'Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n    tags: ['nice', 'developer'],\n  },\n  {\n    key: '2',\n    firstName: 'Jim',\n    lastName: 'Green',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n    tags: ['loser'],\n  },\n  {\n    key: '3',\n    firstName: 'Joe',\n    lastName: 'Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n    tags: ['cool', 'teacher'],\n  },\n];\n\nclass Entries extends React.PureComponent{\n    state = {\n      fetch:false\n    }\n    componentDidMount() {\n        this.props.fetchJobProfiles();\n      }\n\n    render(){\n        console.log(this.props.collection)\n        if(this.props.newPage.status === \"loading\" || this.props.newPage.status === \"ready\")\n        return (<div><br/><Spin size=\"large\" />Loading</div>)\n        if(this.props.newPage.status === \"error\")\n        return (<h1> Error </h1>)\n        // return (<Row type=\"flex\"><Col span={4}></Col><Col span={16}><h1>Entries</h1></Col><Col span={4}></Col></Row>)\n        // return (<div><Layout>\n        //   <Header>Header</Header>\n        //   <Content>Content</Content>\n        //   <Footer>Footer</Footer>\n        // </Layout></div>)\n        return (\n          <Table dataSource={data}>\n          <ColumnGroup title=\"Name\">\n            <Column title=\"First Name\" dataIndex=\"firstName\" key=\"firstName\" />\n            <Column title=\"Last Name\" dataIndex=\"lastName\" key=\"lastName\" />\n          </ColumnGroup>\n          <Column title=\"Age\" dataIndex=\"age\" key=\"age\" />\n          <Column title=\"Address\" dataIndex=\"address\" key=\"address\" />\n          <Column\n            title=\"Tags\"\n            dataIndex=\"tags\"\n            key=\"tags\"\n            render={tags => (\n              <span>\n                {tags.map(tag => (\n                  <Tag color=\"blue\" key={tag}>\n                    {tag}\n                  </Tag>\n                ))}\n              </span>\n            )}\n          />\n          <Column\n            title=\"Action\"\n            key=\"action\"\n            render={(text, record) => (\n              <span>\n                <a>Invite {record.lastName}</a>\n                <Divider type=\"vertical\" />\n                <a>Delete</a>\n              </span>\n            )}\n          />\n        </Table>\n        )\n      }\n\n}\n\nconst mapStateToProps = ({ entries: { collection, newPage } }) => ({ collection, newPage });\nconst actions = { fetchJobProfiles };\n\nexport default connect(\n  mapStateToProps,\n  actions,\n)(Entries);","import { FETCH_JOB_PROFILE_SUCCESS } from '../constants';\nexport const initialState = [];\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_JOB_PROFILE_SUCCESS: {\n      return action.payload.data;\n    }\n    default:\n      return state;\n  }\n}","import {\n    FETCH_JOB_PROFILE_REQUEST,\n    FETCH_JOB_PROFILE_SUCCESS,\n    FETCH_JOB_PROFILE_FAIL,\n    NEW_PAGE_INIT,\n  } from '../constants';\n  export const initialState = {\n    status: 'ready',\n    profileList: null,\n    message: '',\n  };\n  \n  export default function(state = initialState, action) {\n    switch (action.type) {\n      case NEW_PAGE_INIT: {\n        return {\n          ...state,\n          status: 'ready',\n        };\n      }\n      case FETCH_JOB_PROFILE_REQUEST: {\n        return {\n          ...state,\n          status: 'loading',\n        };\n      }\n      case FETCH_JOB_PROFILE_SUCCESS: {\n        return {\n          ...state,\n          status: 'success',\n          profileList: action.payload.data,\n          message: 'profiles fetch success',\n        };\n      }\n      case FETCH_JOB_PROFILE_FAIL: {\n        const { error } = action.payload;\n        return {\n          ...state,\n          status: 'error',\n          message: error,\n        };\n      }\n      default:\n        return state;\n    }\n  }\n  ","import {combineReducers} from 'redux';\nimport entries from './entries';\nlet reducers = {\n  ...entries.reducers,\n};\nexport default combineReducers (reducers);\n","import reducers from './reducers';\nconst entries = {\n    reducers: reducers,\n  };\nexport default entries","import { combineReducers } from 'redux';\nimport collection from './collection';\nimport newPage from './newPage'\n\nexport default {\n  entries: combineReducers({\n    collection,\n    newPage\n  }),\n};","import {createStore, applyMiddleware} from 'redux';\nimport globalReducer from './globalReducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(globalReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;","import React from 'react';\nimport DatePicker from 'antd/es/date-picker'; // for js\nimport Row from 'antd/es/row'\n\nimport Col from 'antd/es/col';\n// import 'antd/dist/antd.css';\nimport './index.css';\nimport Entries from './entries/entries';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst App = () => (\n  \n  <Provider store={store}>\n      <Entries />\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Layout } from 'antd';\n\nconst { Header, Footer, Sider, Content } = Layout;\nReactDOM.render((<div><Layout>\n    <Header>Header</Header>\n    <Content><App/></Content>\n    <Footer>Footer</Footer>\n  </Layout></div>), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}