{"version":3,"sources":["api/v1.js","entries/actions/fetchJobProfiles.js","entries/constants.js","entries/entries.jsx","entries/reducers/collection.js","entries/reducers/newPage.js","globalReducer.js","entries/index.js","entries/reducers/index.js","store.js","App.jsx","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","timeout","on200","status","code","data","onOther","err","response","d","error","message","v1","get","path","config","console","log","then","catch","post","put","del","delete","fetchJobProfiles","dispatch","type","payload","Entries","this","props","collection","React","PureComponent","actions","connect","entries","initialState","reimbursement","reducers","combineReducers","state","action","expenses","newPage","composeWithDevTools","applyMiddleware","thunk","store","createStore","globalReducer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sQAEMA,E,OAAMC,EAAMC,OAAQ,CACxBC,QAAQ,8CACRC,QAAS,MAGLC,EAAQ,SAAC,GAAD,MAAqB,CAACC,OAAtB,EAAEA,OAA4BC,KAAM,KAAMC,KAA1C,EAAUA,OAElBC,EAAU,SAAAC,GAAQ,IAAD,EACEA,EAAIC,UAAY,CAACL,OAAQ,EAAGE,KAAM,MAAlDF,EADc,EACdA,OACDM,EAFe,EACNJ,MACG,GAClB,GAAIF,EAAS,IAAK,CAChB,IAAMC,EAAOG,EAAIH,MAAQ,iBAEzB,MAAO,CAACD,SAAQC,OAAMC,KAAM,CAACK,MADfH,EAAII,SAAW,2CACOP,SAEtC,IAAMA,EAAOK,EAAEL,MAAF,YAAeD,GAE5B,MAAO,CAACA,SAAQC,OAAMC,KAAM,CAACK,MADfD,EAAEC,OAAF,gCAAoCP,EAApC,KACsBC,UAwBvBQ,EAPJ,CACTC,IAfU,SAACC,EAAMC,GAEjB,OADEC,QAAQC,IAAIH,GACPjB,EAAIgB,IAAIC,EAAMC,GAAQG,KAAKhB,GAAOiB,MAAMb,IAc/Cc,KATW,SAACN,EAAMT,EAAMU,GACxB,OAAOlB,EAAIuB,KAAKN,EAAMT,EAAMU,GAAQG,KAAKhB,GAAOiB,MAAMb,IAStDe,IAPU,SAACP,EAAMT,EAAMU,GACvB,OAAOlB,EAAIwB,IAAIP,EAAMT,EAAMU,GAAQG,KAAKhB,GAAOiB,MAAMb,IAOrDgB,IAdU,SAACR,EAAMC,GACjB,OAAOlB,EAAI0B,OAAOT,EAAMC,GAAQG,KAAKhB,GAAOiB,MAAMb,KCRrCkB,EAfU,kBAAM,SAACC,GAC9BA,EAAS,CAAEC,KCJ4B,4BDIKC,QAAS,KACrDX,QAAQC,IAAI,UACZL,EAAGC,IAAI,KAAM,MAAMK,KAAK,YAAqB,IAAlBd,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC/B,OAAQD,GACN,IAAK,KACH,OAAOqB,EAAS,CAAEC,KCRe,4BDQkBC,QAAStB,IAC9D,IAAK,WACH,OAAOoB,EAAS,CAAEC,KCRJ,SDQkBC,QAAStB,IAC3C,QACE,OAAOoB,EAAS,CAAEC,KCXY,yBDWkBC,QAAStB,SER3DuB,E,4LAEEC,KAAKC,MAAMN,qB,+BAKX,OADAR,QAAQC,IAAIY,KAAKC,MAAMC,YACf,2C,GAPMC,IAAMC,eAatBC,EAAU,CAAEV,oBAEHW,cAHS,SAAC,GAAD,MAAkC,CAAEJ,WAApC,EAAGK,QAAWL,aAKpCG,EAFaC,CAGbP,G,8BCvBWS,EAAe,G,mjBCKnB,IAAMA,EAAe,CAC1BlC,OAAQ,QACRmC,cAAe,KACf3B,QAAS,I,4NCLb,IAAI4B,E,qVAAQ,ICHI,CACZA,SCEW,CACbH,QAASI,0BAAgB,CACvBT,WJHW,WAAwC,IAA/BU,EAA8B,uDAAtBJ,EAAcK,EAAQ,uCACpD,OAAQA,EAAOhB,MACb,IFHqC,4BEInC,OAAOgB,EAAOf,QAAQgB,SAExB,QACE,OAAOF,IIFTG,QHKa,WAAwC,IAA/BH,EAA8B,uDAAtBJ,EAAcK,EAAQ,uCACpD,OAAQA,EAAOhB,MACb,IHduB,gBGerB,OAAO,EAAP,GACKe,EADL,CAEEtC,OAAQ,UAGZ,IHnBmC,4BGoBjC,OAAO,EAAP,GACKsC,EADL,CAEEtC,OAAQ,YAGZ,IHxBmC,4BGyBjC,OAAO,EAAP,GACKsC,EADL,CAEEtC,OAAQ,YACRmC,cAAeI,EAAOf,QAAQtB,KAC9BM,QAAS,2BAGb,IH/BgC,yBG+BF,IACpBD,EAAUgC,EAAOf,QAAjBjB,MACR,OAAO,EAAP,GACK+B,EADL,CAEEtC,OAAQ,QACRQ,QAASD,IAGb,QACE,OAAO+B,QCtCFF,UAEEC,4BAAiBD,EAAUM,8BAAoBC,0BAAgBC,OGF/DC,EAFDC,sBAAYC,GCeXC,EANH,kBACV,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,QCFcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC,iB","file":"static/js/main.87c6dd82.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create ({\n  baseURL: `https://nut-case.s3.amazonaws.com/jobs.json`,\n  timeout: 40000,\n});\n\nconst on200 = ({status, data}) => ({status, code: 'OK', data});\n\nconst onOther = err => {\n  const {status, data} = err.response || {status: 0, data: null};\n  const d = data || {};\n  if (status < 100) {\n    const code = err.code || 'E_DISCONNECTED';\n    const error = err.message || 'Failed to connect, check your connection';\n    return {status, code, data: {error, code}};\n  }\n  const code = d.code || `E_${status}`;\n  const error = d.error || `Something went wrong (${status})`;\n  return {status, code, data: {error, code}};\n};\n\nconst get = (path, config) => {\n    console.log(path)\n  return api.get(path, config).then(on200).catch(onOther);\n};\nconst del = (path, config) => {\n  return api.delete(path, config).then(on200).catch(onOther);\n};\nconst post = (path, data, config) => {\n  return api.post(path, data, config).then(on200).catch(onOther);\n};\nconst put = (path, data, config) => {\n  return api.put(path, data, config).then(on200).catch(onOther);\n};\n\nconst v1 = {\n  get,\n  post,\n  put,\n  del\n};\n\nexport default v1;\n","import v1 from '../../api/v1';\n\nimport { FETCH_JOB_PROFILE_FAIL, FETCH_JOB_PROFILE_REQUEST, FETCH_JOB_PROFILE_SUCCESS, UNAUTH } from '../constants';\n\nconst fetchJobProfiles = () => (dispatch) => {\n  dispatch({ type: FETCH_JOB_PROFILE_REQUEST, payload: {} });\n  console.log(\"inasdd\")\n  v1.get(null, null).then(({ code, data }) => {\n    switch (code) {\n      case 'OK':\n        return dispatch({ type: FETCH_JOB_PROFILE_SUCCESS, payload: data });\n      case 'E_UNAUTH':\n        return dispatch({ type: UNAUTH, payload: data });\n      default:\n        return dispatch({ type: FETCH_JOB_PROFILE_FAIL, payload: data });\n    }\n  });\n};\n\nexport default fetchJobProfiles;","export const NEW_PAGE_INIT = 'NEW_PAGE_INIT';\nexport const FETCH_JOB_PROFILE_REQUEST = 'FETCH_JOB_PROFILE_REQUEST';\nexport const FETCH_JOB_PROFILE_SUCCESS = 'FETCH_JOB_PROFILE_SUCCESS';\nexport const FETCH_JOB_PROFILE_FAIL = 'FETCH_JOB_PROFILE_FAIL';\nexport const UNAUTH = 'UNAUTH'","import React from 'react';\nimport { connect } from 'react-redux';\n// import { Link } from 'react-router-dom';\n// import initNewPage from './actions/initNewPage';\nimport fetchJobProfiles from './actions/fetchJobProfiles';\n\nclass Entries extends React.PureComponent{\n    componentDidMount() {\n        this.props.fetchJobProfiles();\n      }\n\n    render(){\n        console.log(this.props.collection)\n        return (<h1>Entries</h1>)\n    }\n\n}\n\nconst mapStateToProps = ({ entries: { collection } }) => ({ collection });\nconst actions = { fetchJobProfiles };\n\nexport default connect(\n  mapStateToProps,\n  actions,\n)(Entries);","import { FETCH_JOB_PROFILE_SUCCESS } from '../constants';\nexport const initialState = [];\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_JOB_PROFILE_SUCCESS: {\n      return action.payload.expenses;\n    }\n    default:\n      return state;\n  }\n}","import {\n    FETCH_JOB_PROFILE_REQUEST,\n    FETCH_JOB_PROFILE_SUCCESS,\n    FETCH_JOB_PROFILE_FAIL,\n    NEW_PAGE_INIT,\n  } from '../constants';\n  export const initialState = {\n    status: 'ready',\n    reimbursement: null,\n    message: '',\n  };\n  \n  export default function(state = initialState, action) {\n    switch (action.type) {\n      case NEW_PAGE_INIT: {\n        return {\n          ...state,\n          status: 'ready',\n        };\n      }\n      case FETCH_JOB_PROFILE_REQUEST: {\n        return {\n          ...state,\n          status: 'loading',\n        };\n      }\n      case FETCH_JOB_PROFILE_SUCCESS: {\n        return {\n          ...state,\n          status: 'submitted',\n          reimbursement: action.payload.data,\n          message: 'profiles fetch success',\n        };\n      }\n      case FETCH_JOB_PROFILE_FAIL: {\n        const { error } = action.payload;\n        return {\n          ...state,\n          status: 'error',\n          message: error,\n        };\n      }\n      default:\n        return state;\n    }\n  }\n  ","import {combineReducers, applyMiddleware} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport entries from './entries';\nlet reducers = {\n  ...entries.reducers,\n};\nexport default combineReducers (reducers, composeWithDevTools(applyMiddleware(thunk)));\n","import reducers from './reducers';\nconst entries = {\n    reducers: reducers,\n  };\nexport default entries","import { combineReducers } from 'redux';\nimport collection from './collection';\nimport newPage from './newPage'\n\nexport default {\n  entries: combineReducers({\n    collection,\n    newPage\n  }),\n};","import {createStore} from 'redux';\nimport globalReducer from './globalReducer';\n\nconst store = createStore(globalReducer);\n\nexport default store;","// import React from 'react';\n// import DatePicker from 'antd/es/date-picker'; // for js\n// import Row from 'antd/es/row'\n// import 'antd/es/date-picker/style/css';\n// import 'antd/es/row/style/css';\n// import Col from 'antd/es/col';\n// import 'antd/es/col/style/css';\nimport Entries from './entries/entries'\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst App = () => (\n  <Provider store={store}>\n      <Entries />\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}